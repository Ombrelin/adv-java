#import "@preview/polylux:0.3.1": *
#import "@preview/sourcerer:0.2.1": code
#import themes.clean: *

#show: clean-theme.with(
  logo: image("images/efrei.jpg"),
  footer: [EFREI Paris, Ars√®ne Lapostolet & Nada Nahle],
  short-title: [EFREI LSI L3 ALSI62-CTP : Java Avanc√©],
  color: rgb("#EB6237")
)

#title-slide(
  title: [Java Avanc√©],
  subtitle: [Cours 2 : Tests Unitaires],
  authors: ([Ars√®ne Lapostolet & Nada Nahle])
)


#new-section-slide("Tests unitaires en Java")

#slide(title: "Tests automatiques")[
  - Du code qui v√©rifie le fonctionnement de l'application
  - D√©tecter le bugs majeurs en 1 clic
  - On est plus confiant quand on doit changer le code

  #text(style:"italic", "Meilleure qualit√© & fiabilit√© du logiciel")
]

#slide(title: "Tests unitaires")[
  - Fin niveau de granularit√©
  - Teste une *unit√©* de code

* Unit√©* : m√©thode, classe, petit groupe de classe ayant un fort lien logique.

#text(style:"italic", "Aide a trouver les bugs, mais ne permet pas de dire qu'il n'y en a pas")

]

#slide(title: "Structure d'un test")[
  - *Arrangement* : mis en place
  - *Action* : ex√©cuter le code que l'on veut tester
  - *Affirmation* : v√©rifier que le r√©sultat est bien le bon

\

#text(style:"italic","Etant donn√© <arrangement>, quand <action>, alors <affirmation>")

]

#slide(title: "Tests avec JUnit 5")[
  
- M√©thode de tests: M√©thode avec l'annotation `@Test`
- Suite de tests: Classe contenant des m√©thodes de test
- Une suite de test par *Unit√©*
- Classes rang√©es sous `src/test/java`

]

#slide(title: "M√©thode de test")[
  #code(
  lang: "Java",
```java
@Test
void wordCount_whenMultipleWords_returnsRightCount(){
    // Given
    var input = "bonjour le monde";

    // When
    var result = App.countWords(input);

    // Then
    assertEquals(3, result);
}
```
)
]

#slide(title: "Cas de test")[

  Des points pivots divisent les flux d'ex√©cution potentiels.

  Points pivots : 
  - `if`
  - `switch`

  _Analyser ce qui a du sens d'un PDV fonctionnel_

]

#focus-slide(background:  rgb("#EB6237"))[
  üó®Ô∏è Des questions ? 
]

#new-section-slide("Pseudo Entit√©s")

#slide(title: "Pseudo Entit√©s")[

  Utilit√© : remplacer une d√©pendance pour faciliter les tests.

  - *Faux (fake)* : impl√©mentation coh√©rente mais simplifi√©e
  - *Simulacre (mock)* :  coquille vide avec un comprtement param√®tr√©
  
]

#slide(title: "Faux (fake)")[
  #code(
  lang: "Java",
```java
public class FakeRepository implements UserRepository {

    private final Map<String, User> data;

    public FakeUsersRepository(Map<String, User> data){
        this.data = data;
    }

    public User findByUsername(String username){
        return this.data.get(username);
    }
}
```
)
]

#slide(title: "Simulacre (mock) avec Mockito")[
    #code(
  lang: "Java",
```java
public interface GithubApiClient {
    List<GithubRepo> getUserRepository(String username);
}
```
)
  #code(
  lang: "Java",
```java
final var apiClientMock = mock(GithubApiClient.class);
when(apiClientMock.getUserRepository(testUsername))
    .thenReturn(
        List.of(
            new GithubRepo("test repo 1", 32),
            new GithubRepo("test repo 2", 12)
        )
    );
```
)
]

#focus-slide(background:  rgb("#EB6237"))[
  üó®Ô∏è Des questions ?
]

#new-section-slide("Qualit√© de tests")

#slide(title: "Conception de tests et couplage")[
  Ecrire un test sanctuarise une interface (si on refactor on doit refactorer le test aussi) 

  Cela a du sens pour : 

  - Algorithmes
  - IO
  - Fronti√®re des unit√©s

  _La conception des unit√©s est importante_
]

#slide(title: "Code testable")[
  *Injection de d√©pendances :* Externaliser des comportement dans des classes (d√©pendances), et les fournir en param√®tre du constructeur.

  *Inversion de d√©pendance :* Abstraire les d√©pendance par un contrat de service (une interface)

  - Code modulaire
  - Couplages moins forts

  _-> Le code est plus facile et test, maintenir, refactorer_ 
]

#focus-slide(background:  rgb("#EB6237"))[
  üó®Ô∏è Des questions ?
]

#new-section-slide("D√©veloppement dirig√© par les tests (TDD)")

#slide(title: "D√©veloppement dirig√© par les tests (TDD)")[
  
  *TDD (tests driven development) :* M√©thode de d√©veloppment "test-first".

  Cycle RED-GREEN-REFACTOR :

  - RED: √©crire un test qui ne passe pas
  - GREEN: √©crire le code minimal qui suffit √† faire passer le test
  - REFACTOR: retravailler le code √©crit pour l'am√©liorer
]

#slide(title: "Pourquoi le TDD ?")[
  
    - *Vitesse:* valider plus vite les id√©es, passer moins de temps √† d√©bugger manuellement

    - *Confiance:* tests + fiables et pertinents, vraie sp√©cification ex√©cutable. Meilleure s√©curit√© contre la r√©gression

    - *Qualit√© :* force la r√©flexion autour des interfaces, on d√©tecte ainsi les probl√®mes de conception plus t√¥t. On est forc√© √† refactorer plus souvent, donc on produit du meilleur code
]

#focus-slide(background:  rgb("#EB6237"))[
  üó®Ô∏è Des questions ?
]
