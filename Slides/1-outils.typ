#import "@preview/polylux:0.3.1": *
#import "@preview/sourcerer:0.2.1": code
#import themes.clean: *

#show: clean-theme.with(
  logo: image("images/efrei.jpg"),
  footer: [Ars√®ne Lapostolet, EFREI Paris],
  short-title: [EFREI LSI L3 ALSI62-CTP : Java Avanc√©],
  color: rgb("#EB6237")
)

#title-slide(
  title: [Java Avanc√©],
  subtitle: [Cours 1 : Outillage],
  authors: ([Ars√®ne Lapostolet]),
  date: [19 Janvier 2024],
)

#slide(title: [Les outils du module])[
  - Plateforme de d√©veloppement : Machine Virtuelle Java (JVM)
  - Langage de programmation : Java 21
  - Environment de d√©veloppement int√©gr√© : IntelliJ IDEA Community
  - Syst√®me de Gestion de Version : Git et GitLab
  - Syst√®me de build : Gradle
]

/*
#new-section-slide("Git")

#slide(title: [Qu'est ce que Git ?])[
  Syst√®me de Gestion de Version : 
  - Versionner le code : suivre pr√©cisement les changements
  - Naviguer entre les versions
  - Ne pas perdre de changements
  - Revenir en arri√®re
  - Coop√©ration √† plusieurs sur le m√™me code
]

#slide(title: [Concepts importants])[
  - *Commit :* version du code sauvegard√©e √† un instant T.
  - *Branche :* historiques de commits qui √©voluent en parall√®le

  Cr√©er un d√©p√¥t local :

#code(
  lang: "Bash",
  ```bash
  mkdir dossierPourMonDepot
  cd dossierPourMonDepot
  git init
  ```
)
]

#slide(title: [Base d'un workflow Git])[

- Cr√©er un commits
  1. `git add .` : ajouter tous les changements au suivi git
  2. `git commit -m "message de commit"` : cr√©e un commit avec les changements track√©s
- Cr√©er une branche : 
  1. `git branch nomDeLaBranche` : cr√©er la branche
  2. `git checkout nomDeLaBranche` : se positionner sur la branche
]

#slide(title: [Fusion])[
  Pour appliquer les changement pr√©sents sur une branche √† une autre : 

#code(
  lang: "Bash",
  ```bash
git checkout brancheCible
git merge brancheAFusionner
  ```
)

On appliquer les changement des la branche `brancheAFusionner` sur la branche `brancheCible`.

Attention aux conflits !
]

#slide(title: [D√©p√¥t distant])[

#code(
  lang: "Bash",
  ```bash
git remote add nomLocalDuDepotDistant urlDuDepotDistant
  ```
)
1. Sauvegarder son travail en lieu sur
2. Coop√©rer avec d'autres personnes

Int√©raction : 

- `git push nomDelaBranche` : pousser une branche locale vers le d√©p√¥t
- `git pull nomDelaBranche` : r√©cup√©rer une branche distante dans son d√©p√¥t local
]

#slide(title: [R√©cap des espaces])[
  #figure(image("images/espaces-git.png", width: 83%))
]

#slide(title: [R√©cap du workflow])[

1. Se positionner sur la branche principale : `git checkout master`
2. Mettre √† jour la branche principale : `git pull origin master`
3. Cr√©er une nouvelle branche √† partir de la branche principale : `git branch maFeature`

4. Se positionner sur la nouvelle branche : `git checkout maFeature`

5. Faire des changements dans le code

6. Ajouter les changements √† git : `git add .`

7. Cr√©er un nouveau commit avec les changements : `git commit -m "message de commit"`

8. Pousser les changements : `git push origin maFeature`

9. Retourner sur master : `git checkout master`

10. Fusionner la branche de feature : `git merge maFeature`
]


#focus-slide(background:  rgb("#EB6237"))[
  Des questions ? 
]
*/



#new-section-slide("Jetbrains IntelliJ IDEA")

#slide(title: [Qu'est ce que IntelliJ ?])[

- Environment de d√©veloppement int√©gr√© pour Java et langages JVM
- Standard depuis 15 ans
- Moderne
- Version community gratuite et open source
- Version ultimate payante mais gratuite pour √©tudiants

‚û°Ô∏è La version community suffit parfaitement pour le module
]

#new-section-slide("GitLab")

#slide(title: [Qu'est ce que GitLab ?])[

- Serveur git
- Open source
- Int√®gre un d'int√©gration continue
- Revue de code
- Tr√®s utilis√© dans l'industrie
- Projets priv√©s gratuits sur gitlab.com
]

#new-section-slide("Gradle")

#slide(title: [Qu'est ce que Gradle ?])[

- Outil de build
  - Structuer le projet
  - D√©crire comment le compiler, packager, ex√©cuter, tester 
]



#slide(title: [Structure d'un projet Gradle])[

#code(
  lang: "Bash",
  ```bash
‚îú‚îÄ‚îÄ settings.gradle
‚îî‚îÄ‚îÄ app
    ‚îú‚îÄ‚îÄ build.gradle
    ‚îî‚îÄ‚îÄ src
        ‚îú‚îÄ‚îÄ main
        ‚îÇ   ‚îî‚îÄ‚îÄ java
        ‚îÇ       ‚îî‚îÄ‚îÄ demo
        ‚îÇ           ‚îî‚îÄ‚îÄ App.java
        ‚îî‚îÄ‚îÄ test
            ‚îî‚îÄ‚îÄ java
                ‚îî‚îÄ‚îÄ demo
                    ‚îî‚îÄ‚îÄ AppTest.java
  ```
)
]

#slide(title: [`settings.gradle`])[

#code(
  lang: "Groovy",
  ```Groovy
rootProject.name = 'mon-projet'
include('app')
  ```
)
]

#slide(title: [`app/build.gradle`])[

#code(
  lang: "Groovy",
  ```Groovy
plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

application {
    mainClass = 'fr.arsenelapostolet.App'
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.google.guava:guava:31.1-jre'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
  ```
)
]

#slide(title: [Commandes de base])[
    - Pour ex√©cuter l'application : `./gradlew run`
    - Pour ex√©cuter les tests : `./gradlew test`

    Sur windows : `./gradlew` est remplac√© par `./gradlew.bat` 
]


#focus-slide(background:  rgb("#EB6237"))[
  üó®Ô∏è Des questions ? 
]

#new-section-slide("PMD")

#slide(title: [Qu'est ce que PMD ?])[

- Analyseur statique de code
- Automatise une partie de la revue
- Avoir un code consistant 
]

#slide(title: [Comment √ßa marche ?])[

‚û°Ô∏è Un fichier `ruleset.xml`

#code(
  lang: "xml",
  ```xml
<?xml version="1.0" 
  xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

  <ruleset name="Custom Rules">
  <description>My custom PMD rules  </description>
  <rule ref="category/java/errorprone.xml/EmptyCatchBlock" />
</ruleset>
  ```
)
]

#slide(title: [Int√©gration Gradle])[

‚û°Ô∏è Un fichier `ruleset.xml`

#code(
  lang: "Groovy",
  ```Groovy
plugins {
    ...
      id("pmd")
}

pmd {
    ruleSetFiles = files("ruleset.xml")
    ruleSets = listOf()
    toolVersion = "7.5.0"
}
  ```
)
]

#slide(title: [T√¢che Gradle])[

‚û°Ô∏è Un fichier `ruleset.xml`

#code(
  lang: "bash",
  ```bash
./gradlew check
  ```
)
]

#focus-slide(background:  rgb("#EB6237"))[
  üó®Ô∏è Des questions ? 
]